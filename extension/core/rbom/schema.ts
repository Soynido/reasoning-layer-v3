import { z } from 'zod';
import { ADR } from './types';

/**
 * Zod schema pour validation des ADRs
 * 
 * Assure la structure cohérente et la validité des données
 */
export const ADRSchema = z.object({
    id: z.string().uuid('Invalid ADR ID format'),
    title: z.string().min(1, 'Title is required'),
    status: z.enum(['proposed', 'accepted', 'deprecated', 'superseded']),
    createdAt: z.string().datetime({ message: 'Invalid date format' }),
    modifiedAt: z.string().datetime({ message: 'Invalid date format' }),
    author: z.string().min(1, 'Author is required'),
    
    // Contenu
    context: z.string(),
    decision: z.string(),
    consequences: z.string(),
    
    // Métadonnées
    tags: z.array(z.string()),
    components: z.array(z.string()),
    relatedADRs: z.array(z.string()),
    
    // Liens avec Evidence
    evidenceIds: z.array(z.string().uuid()),
    
    // Génération automatique
    lastSyncedAt: z.string().datetime().optional(),
    autoGenerated: z.boolean()
});

/**
 * Valide un objet ADR
 */
export function validateADR(data: unknown): ADR | null {
    try {
        const validated = ADRSchema.parse(data);
        return validated as ADR;
    } catch (error) {
        if (error instanceof z.ZodError) {
            console.error('ADR validation failed:', JSON.stringify(error.issues, null, 2));
        }
        return null;
    }
}

/**
 * Valide un nouveau ADR (pour création)
 */
export const CreateADRSchema = ADRSchema.omit({ 
    id: true, 
    createdAt: true, 
    modifiedAt: true,
    lastSyncedAt: true,
    evidenceIds: true,
    autoGenerated: true
}).extend({
    title: z.string().min(1),
    author: z.string().min(1),
    status: z.enum(['proposed', 'accepted', 'deprecated', 'superseded']).default('proposed')
});

/**
 * Valide un ADR pour mise à jour
 */
export const UpdateADRSchema = ADRSchema.partial().required({ id: true });

